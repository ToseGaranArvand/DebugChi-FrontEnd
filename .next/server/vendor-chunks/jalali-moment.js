/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/jalali-moment";
exports.ids = ["vendor-chunks/jalali-moment"];
exports.modules = {

/***/ "(ssr)/./node_modules/jalali-moment/jalali-moment.js":
/*!*****************************************************!*\
  !*** ./node_modules/jalali-moment/jalali-moment.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = jMoment;\n\nvar moment = __webpack_require__(/*! moment/moment */ \"(ssr)/./node_modules/moment/moment.js\");\n__webpack_require__(/*! moment/locale/fa */ \"(ssr)/./node_modules/moment/locale/fa.js\");\n\n/************************************\n Constants\n ************************************/\n\nvar formattingTokens = /(\\[[^\\[]*\\])|(\\\\)?j(Mo|MM?M?M?|Do|DDDo|DD?D?D?|w[o|w]?|YYYYY|YYYY|YY|gg(ggg?)?|)|(\\\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|SS?S?|X|zz?|ZZ?|.)/g\n    , localFormattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(LT|LL?L?L?|l{1,4})/g\n    , parseTokenOneOrTwoDigits = /\\d\\d?/\n    , parseTokenOneToThreeDigits = /\\d{1,3}/\n    , parseTokenThreeDigits = /\\d{3}/\n    , parseTokenFourDigits = /\\d{1,4}/\n    , parseTokenSixDigits = /[+\\-]?\\d{1,6}/\n    , parseTokenWord = /[0-9]*[\"a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+|[\\u0600-\\u06FF\\/]+(\\s*?[\\u0600-\\u06FF]+){1,2}/i\n    , parseTokenTimezone = /Z|[\\+\\-]\\d\\d:?\\d\\d/i\n    , parseTokenT = /T/i\n    , parseTokenTimestampMs = /[\\+\\-]?\\d+(\\.\\d{1,3})?/\n\n    , unitAliases = {\n        jm: \"jmonth\"\n        , jmonths: \"jmonth\"\n        , jy: \"jyear\"\n        , jyears: \"jyear\"\n    }\n\n    , formatFunctions = {}\n\n    , ordinalizeTokens = \"DDD w M D\".split(\" \")\n    , paddedTokens = \"M D w\".split(\" \");\n\nvar CalendarSystems = {\n    Jalali: 1,\n    Gregorian: 2,\n}\nvar formatTokenFunctions = {\n    jM: function () {\n        return this.jMonth() + 1;\n    },\n    jMMM: function (format) {\n        return this.localeData().jMonthsShort(this, format);\n    },\n    jMMMM: function (format) {\n        return this.localeData().jMonths(this, format);\n    },\n    jD: function () {\n        return this.jDate();\n    },\n    jDDD: function () {\n        return this.jDayOfYear();\n    },\n    jw: function () {\n        return this.jWeek();\n    },\n    jYY: function () {\n        return leftZeroFill(this.jYear() % 100, 2);\n    },\n    jYYYY: function () {\n        return leftZeroFill(this.jYear(), 4);\n    },\n    jYYYYY: function () {\n        return leftZeroFill(this.jYear(), 5);\n    },\n    jgg: function () {\n        return leftZeroFill(this.jWeekYear() % 100, 2);\n    },\n    jgggg: function () {\n        return this.jWeekYear();\n    },\n    jggggg: function () {\n        return leftZeroFill(this.jWeekYear(), 5);\n    }\n};\n\nfunction padToken(func, count) {\n    return function (a) {\n        return leftZeroFill(func.call(this, a), count);\n    };\n}\nfunction ordinalizeToken(func, period) {\n    return function (a) {\n        return this.localeData().ordinal(func.call(this, a), period);\n    };\n}\n\n(function () {\n    var i;\n    while (ordinalizeTokens.length) {\n        i = ordinalizeTokens.pop();\n        formatTokenFunctions[\"j\" + i + \"o\"] = ordinalizeToken(formatTokenFunctions[\"j\" + i], i);\n    }\n    while (paddedTokens.length) {\n        i = paddedTokens.pop();\n        formatTokenFunctions[\"j\" + i + i] = padToken(formatTokenFunctions[\"j\" + i], 2);\n    }\n    formatTokenFunctions.jDDDD = padToken(formatTokenFunctions.jDDD, 3);\n}());\n\n/************************************\n Helpers\n ************************************/\n\nfunction extend(a, b) {\n    var key;\n    for (key in b)\n        if (b.hasOwnProperty(key)){\n            a[key] = b[key];\n        }\n    return a;\n}\n\n/**\n * return a string which length is as much as you need\n * @param {number} number input\n * @param {number} targetLength expected length\n * @example leftZeroFill(5,2) => 05\n **/\nfunction leftZeroFill(number, targetLength) {\n    var output = number + \"\";\n    while (output.length < targetLength){\n        output = \"0\" + output;\n    }\n    return output;\n}\n\n/**\n * determine object is array or not\n * @param input\n **/\nfunction isArray(input) {\n    return Object.prototype.toString.call(input) === \"[object Array]\";\n}\n\n/**\n * Changes any moment Gregorian format to Jalali system format\n * @param {string} format\n * @example toJalaliFormat(\"YYYY/MMM/DD\") => \"jYYYY/jMMM/jDD\"\n **/\nfunction toJalaliFormat(format) {\n    for (var i = 0; i < format.length; i++) {\n        if(!i || (format[i-1] !== \"j\" && format[i-1] !== format[i])) {\n            if (format[i] === \"Y\" || format[i] === \"M\" || format[i] === \"D\" || format[i] === \"g\") {\n                format = format.slice(0, i) + \"j\" + format.slice(i);\n            }\n        }\n    }\n    return format;\n}\n\n/**\n * Changes any moment Gregorian units to Jalali system units\n * @param {string} units\n * @example toJalaliUnit(\"YYYY/MMM/DD\") => \"jYYYY/jMMM/jDD\"\n **/\nfunction toJalaliUnit(units) {\n    switch (units) {\n        case \"week\" : return \"jWeek\";\n        case \"year\" : return \"jYear\";\n        case \"month\" : return \"jMonth\";\n        case \"months\" : return \"jMonths\";\n        case \"monthName\" : return \"jMonthsShort\";\n        case \"monthsShort\" : return \"jMonthsShort\";\n    }\n    return units;\n}\n\n/**\n * normalize units to be comparable\n * @param {string} units\n **/\nfunction normalizeUnits(units, momentObj) {\n    if (isJalali(momentObj)) {\n        units = toJalaliUnit(units);\n    }\n     if (units) {\n        var lowered = units.toLowerCase();\n        if (lowered.startsWith('j')) units = unitAliases[lowered] || lowered;\n        // TODO : add unit test\n        if (units === \"jday\") units = \"day\";\n        else if (units === \"jd\") units = \"d\";\n    }\n    return units;\n}\n\n/**\n * set a gregorian date to moment object\n * @param {string} momentInstance\n * @param {string} year in gregorian system\n * @param {string} month in gregorian system\n * @param {string} day in gregorian system\n **/\nfunction setDate(momentInstance, year, month, day) {\n    var d = momentInstance._d;\n    if (momentInstance._isUTC) {\n        /*eslint-disable new-cap*/\n        momentInstance._d = new Date(Date.UTC(year, month, day,\n            d.getUTCHours(), d.getUTCMinutes(), d.getUTCSeconds(), d.getUTCMilliseconds()));\n        /*eslint-enable new-cap*/\n    } else {\n        momentInstance._d = new Date(year, month, day,\n            d.getHours(), d.getMinutes(), d.getSeconds(), d.getMilliseconds());\n    }\n}\n\nfunction objectCreate(parent) {\n    function F() {}\n    F.prototype = parent;\n    return new F();\n}\n\nfunction getPrototypeOf(object) {\n    if (Object.getPrototypeOf){\n        return Object.getPrototypeOf(object);\n    }\n    else if (\"\".__proto__){\n        return object.__proto__;\n    }\n    else{\n        return object.constructor.prototype;\n    }\n}\n\n/************************************\n Languages\n ************************************/\nextend(getPrototypeOf(moment.localeData()),\n    { _jMonths: [ \"Farvardin\"\n        , \"Ordibehesht\"\n        , \"Khordaad\"\n        , \"Tir\"\n        , \"Mordaad\"\n        , \"Shahrivar\"\n        , \"Mehr\"\n        , \"Aabaan\"\n        , \"Aazar\"\n        , \"Dey\"\n        , \"Bahman\"\n        , \"Esfand\"\n    ]\n        , jMonths: function (m) {\n            if (m) {\n                return this._jMonths[m.jMonth()];\n            } else {\n                return this._jMonths;\n            }\n    }\n\n        , _jMonthsShort:  [ \"Far\"\n        , \"Ord\"\n        , \"Kho\"\n        , \"Tir\"\n        , \"Amo\"\n        , \"Sha\"\n        , \"Meh\"\n        , \"Aab\"\n        , \"Aaz\"\n        , \"Dey\"\n        , \"Bah\"\n        , \"Esf\"\n    ]\n        , jMonthsShort: function (m) {\n        if (m) {\n            return this._jMonthsShort[m.jMonth()];\n        } else {\n            return this._jMonthsShort;\n        }\n    }\n\n        , jMonthsParse: function (monthName) {\n        var i\n            , mom\n            , regex;\n        if (!this._jMonthsParse){\n            this._jMonthsParse = [];\n        }\n        for (i = 0; i < 12; i += 1) {\n            // Make the regex if we don\"t have it already.\n            if (!this._jMonthsParse[i]) {\n                mom = jMoment([2000, (2 + i) % 12, 25]);\n                regex = \"^\" + this.jMonths(mom, \"\") + \"|^\" + this.jMonthsShort(mom, \"\");\n                this._jMonthsParse[i] = new RegExp(regex.replace(\".\", \"\"), \"i\");\n            }\n            // Test the regex.\n            if (this._jMonthsParse[i].test(monthName)){\n                return i;\n            }\n        }\n    }\n    }\n);\n\n/************************************\n Formatting\n ************************************/\n\nfunction makeFormatFunction(format) {\n    var array = format.match(formattingTokens)\n        , length = array.length\n        , i;\n\n    for (i = 0; i < length; i += 1){\n        if (formatTokenFunctions[array[i]]){\n            array[i] = formatTokenFunctions[array[i]];\n        }\n    }\n    return function (mom) {\n        var output = \"\";\n        for (i = 0; i < length; i += 1){\n            output += array[i] instanceof Function ? \"[\" + array[i].call(mom, format) + \"]\" : array[i];\n        }\n        return output;\n    };\n}\n\n/************************************\n Parsing\n ************************************/\n\nfunction getParseRegexForToken(token, config) {\n    switch (token) {\n        case \"jDDDD\":\n            return parseTokenThreeDigits;\n        case \"jYYYY\":\n            return parseTokenFourDigits;\n        case \"jYYYYY\":\n            return parseTokenSixDigits;\n        case \"jDDD\":\n            return parseTokenOneToThreeDigits;\n        case \"jMMM\":\n        case \"jMMMM\":\n            return parseTokenWord;\n        case \"jMM\":\n        case \"jDD\":\n        case \"jYY\":\n        case \"jM\":\n        case \"jD\":\n            return parseTokenOneOrTwoDigits;\n        case \"DDDD\":\n            return parseTokenThreeDigits;\n        case \"YYYY\":\n            return parseTokenFourDigits;\n        case \"YYYYY\":\n            return parseTokenSixDigits;\n        case \"S\":\n        case \"SS\":\n        case \"SSS\":\n        case \"DDD\":\n            return parseTokenOneToThreeDigits;\n        case \"MMM\":\n        case \"MMMM\":\n        case \"dd\":\n        case \"ddd\":\n        case \"dddd\":\n            return parseTokenWord;\n        case \"a\":\n        case \"A\":\n            return moment.localeData(config._l)._meridiemParse;\n        case \"X\":\n            return parseTokenTimestampMs;\n        case \"Z\":\n        case \"ZZ\":\n            return parseTokenTimezone;\n        case \"T\":\n            return parseTokenT;\n        case \"MM\":\n        case \"DD\":\n        case \"YY\":\n        case \"HH\":\n        case \"hh\":\n        case \"mm\":\n        case \"ss\":\n        case \"M\":\n        case \"D\":\n        case \"d\":\n        case \"H\":\n        case \"h\":\n        case \"m\":\n        case \"s\":\n            return parseTokenOneOrTwoDigits;\n        default:\n            return new RegExp(token.replace(\"\\\\\", \"\"));\n    }\n}\nfunction isNull(variable) {\n    return variable === null || variable === undefined;\n}\nfunction addTimeToArrayFromToken(token, input, config) {\n    var a\n        , datePartArray = config._a;\n\n    switch (token) {\n        case \"jM\":\n        case \"jMM\":\n            datePartArray[1] = isNull(input)? 0 : ~~input - 1;\n            break;\n        case \"jMMM\":\n        case \"jMMMM\":\n            a = moment.localeData(config._l).jMonthsParse(input);\n            if (!isNull(a)){\n                datePartArray[1] = a;\n            }\n            else{\n                config._isValid = false;\n            }\n            break;\n        case \"jD\":\n        case \"jDD\":\n        case \"jDDD\":\n        case \"jDDDD\":\n            if (!isNull(input)){\n                datePartArray[2] = ~~input;\n            }\n            break;\n        case \"jYY\":\n            datePartArray[0] = ~~input + (~~input > 47 ? 1300 : 1400);\n            break;\n        case \"jYYYY\":\n        case \"jYYYYY\":\n            datePartArray[0] = ~~input;\n    }\n    if (isNull(input)) {\n        config._isValid = false;\n    }\n}\n\nfunction dateFromArray(config) {\n    var g\n        , j\n        , jy = config._a[0]\n        , jm = config._a[1]\n        , jd = config._a[2];\n\n    if (isNull(jy) && isNull(jm) && isNull(jd)){\n        return;\n    }\n    jy = !isNull(jy) ? jy : 0;\n    jm = !isNull(jm) ? jm : 0;\n    jd = !isNull(jd) ? jd : 1;\n    if (jd < 1 || jd > jMoment.jDaysInMonth(jy, jm) || jm < 0 || jm > 11){\n        config._isValid = false;\n    }\n    g = toGregorian(jy, jm, jd);\n    j = toJalali(g.gy, g.gm, g.gd);\n    config._jDiff = 0;\n    if (~~j.jy !== jy){\n        config._jDiff += 1;\n    }\n    if (~~j.jm !== jm){\n        config._jDiff += 1;\n    }\n    if (~~j.jd !== jd){\n        config._jDiff += 1;\n    }\n    return [g.gy, g.gm, g.gd];\n}\n\nfunction makeDateFromStringAndFormat(config) {\n    var tokens = config._f.match(formattingTokens)\n        , string = config._i + \"\"\n        , len = tokens.length\n        , i\n        , token\n        , parsedInput;\n\n    config._a = [];\n\n    for (i = 0; i < len; i += 1) {\n        token = tokens[i];\n        parsedInput = (getParseRegexForToken(token, config).exec(string) || [])[0];\n        if (parsedInput){\n            string = string.slice(string.indexOf(parsedInput) + parsedInput.length);\n        }\n        if (formatTokenFunctions[token]){\n            addTimeToArrayFromToken(token, parsedInput, config);\n        }\n    }\n    if (string){\n        config._il = string;\n    }\n    return dateFromArray(config);\n}\n\nfunction makeDateFromStringAndArray(config, utc) {\n    var len = config._f.length\n        , i\n        , format\n        , tempMoment\n        , bestMoment\n        , currentScore\n        , scoreToBeat;\n\n    if (len === 0) {\n        return makeMoment(new Date(NaN));\n    }\n\n    for (i = 0; i < len; i += 1) {\n        format = config._f[i];\n        currentScore = 0;\n        tempMoment = makeMoment(config._i, format, config._l, config._strict, utc);\n\n        if (!tempMoment.isValid()){\n            continue;\n        }\n\n        // currentScore = compareArrays(tempMoment._a, tempMoment.toArray())\n        currentScore += tempMoment._jDiff;\n        if (tempMoment._il){\n            currentScore += tempMoment._il.length;\n        }\n        if (isNull(scoreToBeat) || currentScore < scoreToBeat) {\n            scoreToBeat = currentScore;\n            bestMoment = tempMoment;\n        }\n    }\n\n    return bestMoment;\n}\n\nfunction removeParsedTokens(config) {\n    var string = config._i + \"\"\n        , input = \"\"\n        , format = \"\"\n        , array = config._f.match(formattingTokens)\n        , len = array.length\n        , i\n        , match\n        , parsed;\n\n    for (i = 0; i < len; i += 1) {\n        match = array[i];\n        parsed = (getParseRegexForToken(match, config).exec(string) || [])[0];\n        if (parsed){\n            string = string.slice(string.indexOf(parsed) + parsed.length);\n        }\n        if (!(formatTokenFunctions[match] instanceof Function)) {\n            format += match;\n            if (parsed){\n                input += parsed;\n            }\n        }\n    }\n    config._i = input;\n    config._f = format;\n}\n\n/************************************\n Week of Year\n ************************************/\n\nfunction jWeekOfYear(mom, firstDayOfWeek, firstDayOfWeekOfYear) {\n    var end = firstDayOfWeekOfYear - firstDayOfWeek\n        , daysToDayOfWeek = firstDayOfWeekOfYear - mom.day()\n        , adjustedMoment;\n\n    if (daysToDayOfWeek > end) {\n        daysToDayOfWeek -= 7;\n    }\n    if (daysToDayOfWeek < end - 7) {\n        daysToDayOfWeek += 7;\n    }\n    adjustedMoment = jMoment(mom).add(daysToDayOfWeek, \"d\");\n    return  { week: Math.ceil(adjustedMoment.jDayOfYear() / 7)\n        , year: adjustedMoment.jYear()\n    };\n}\n\n/************************************\n Top Level Functions\n ************************************/\nfunction isJalali (momentObj) {\n    return momentObj &&\n        (momentObj.calSystem === CalendarSystems.Jalali) ||\n        (moment.justUseJalali && momentObj.calSystem !== CalendarSystems.Gregorian);\n}\nfunction isInputJalali(format, momentObj, input) {\n    return (moment.justUseJalali || (momentObj && momentObj.calSystem === CalendarSystems.Jalali))\n}\nfunction makeMoment(input, format, lang, strict, utc) {\n    if (typeof lang === \"boolean\") {\n        utc = utc || strict;\n        strict = lang;\n        lang = undefined;\n    }\n    if (moment.ISO_8601 === format) {\n        format = 'YYYY-MM-DDTHH:mm:ss.SSSZ';\n    }\n    const inputIsJalali = isInputJalali(format, this, input);\n    // var itsJalaliDate = (isJalali(this));\n    if(input && (typeof input === \"string\") && !format && inputIsJalali && !moment.useGregorianParser) {\n        input = input.replace(/\\//g,\"-\");\n        if(/\\d{4}\\-\\d{2}\\-\\d{2}/.test(input)) {\n            format = \"jYYYY-jMM-jDD\";\n        } else if (/\\d{4}\\-\\d{2}\\-\\d{1}/.test(input)) {\n            format = \"jYYYY-jMM-jD\";\n        } else if (/\\d{4}\\-\\d{1}\\-\\d{1}/.test(input)) {\n            format = \"jYYYY-jM-jD\";\n        } else if (/\\d{4}\\-\\d{1}\\-\\d{2}/.test(input)) {\n            format = \"jYYYY-jM-jDD\";\n        } else if (/\\d{4}\\-W\\d{2}\\-\\d{2}/.test(input)) {\n            format = \"jYYYY-jW-jDD\";\n        } else if (/\\d{4}\\-\\d{3}/.test(input)) {\n            format = \"jYYYY-jDDD\";\n        } else if (/\\d{8}/.test(input)) {\n            format = \"jYYYYjMMjDD\";\n        } else if (/\\d{4}W\\d{2}\\d{1}/.test(input)) {\n            format = \"jYYYYjWWjD\";\n        } else if (/\\d{4}W\\d{2}/.test(input)) {\n            format = \"jYYYYjWW\";\n        } else if (/\\d{4}\\d{3}/.test(input)) {\n            format = \"jYYYYjDDD\";\n        }\n    }\n    if (format && inputIsJalali){\n        format = toJalaliFormat(format);\n    }\n    if (format && typeof format === \"string\"){\n        format = fixFormat(format, moment);\n    }\n\n    var config =\n        { _i: input\n            , _f: format\n            , _l: lang\n            , _strict: strict\n            , _isUTC: utc\n        }\n        , date\n        , m\n        , jm\n        , origInput = input\n        , origFormat = format;\n    if (format) {\n        if (isArray(format)) {\n            return makeDateFromStringAndArray(config, utc);\n        } else {\n            date = makeDateFromStringAndFormat(config);\n            removeParsedTokens(config);\n            if (date) {\n                format = \"YYYY-MM-DD-\" + config._f;\n                input = leftZeroFill(date[0], 4) + \"-\"\n                    + leftZeroFill(date[1] + 1, 2) + \"-\"\n                    + leftZeroFill(date[2], 2) + \"-\"\n                    + config._i;\n            }\n        }\n    }\n    if (utc){\n        m = moment.utc(input, format, lang, strict);\n    }\n    else{\n        m = moment(input, format, lang, strict);\n    }\n    if (config._isValid === false || (input && input._isAMomentObject && !input._isValid)){\n        m._isValid = false;\n    }\n    m._jDiff = config._jDiff || 0;\n    jm = objectCreate(jMoment.fn);\n    extend(jm, m);\n    if (strict && jm.isValid()) {\n        jm._isValid = jm.format(origFormat) === origInput;\n    }\n    if (input && input.calSystem) {\n        jm.calSystem = input.calSystem;\n    }\n    return jm;\n}\n\nfunction jMoment(input, format, lang, strict) {\n    return makeMoment(input, format, lang, strict, false);\n}\n\nextend(jMoment, moment);\njMoment.fn = objectCreate(moment.fn);\n\njMoment.utc = function (input, format, lang, strict) {\n    return makeMoment(input, format, lang, strict, true);\n};\n\njMoment.unix = function (input) {\n    return makeMoment(input * 1000);\n};\n\n/************************************\n jMoment Prototype\n ************************************/\n\nfunction fixFormat(format, _moment) {\n    var i = 5;\n    var replace = function (input) {\n        return _moment.localeData().longDateFormat(input) || input;\n    };\n    while (i > 0 && localFormattingTokens.test(format)) {\n        i -= 1;\n        format = format.replace(localFormattingTokens, replace);\n    }\n    return format;\n}\n\njMoment.fn.format = function (format) {\n\tformat = format || jMoment.defaultFormat;\n    if (format) {\n        if (isJalali(this)) {\n            format = toJalaliFormat(format);\n        }\n        format = fixFormat(format, this);\n\n        if (!formatFunctions[format]) {\n            formatFunctions[format] = makeFormatFunction(format);\n        }\n        format = formatFunctions[format](this);\n    }\n    var formatted = moment.fn.format.call(this, format);\n    return formatted;\n};\n\njMoment.fn.year = function (input) {\n    if (isJalali(this)) return jMoment.fn.jYear.call(this,input);\n    else return moment.fn.year.call(this, input);\n};\njMoment.fn.jYear = function (input) {\n    var lastDay\n        , j\n        , g;\n    if (typeof input === \"number\") {\n        j = getJalaliOf(this);\n        lastDay = Math.min(j.jd, jMoment.jDaysInMonth(input, j.jm));\n        g = toGregorian(input, j.jm, lastDay);\n        setDate(this, g.gy, g.gm, g.gd);\n        moment.updateOffset(this);\n        return this;\n    } else {\n        return getJalaliOf(this).jy;\n    }\n};\n\njMoment.fn.month = function (input) {\n    if (isJalali(this)) return jMoment.fn.jMonth.call(this,input);\n    else return moment.fn.month.call(this, input);\n};\njMoment.fn.jMonth = function (input) {\n    var lastDay\n        , j\n        , g;\n    if (!isNull(input)) {\n        if (typeof input === \"string\") {\n            input = this.localeData().jMonthsParse(input);\n            if (typeof input !== \"number\"){\n                return this;\n            }\n        }\n        j = getJalaliOf(this);\n        lastDay = Math.min(j.jd, jMoment.jDaysInMonth(j.jy, input));\n        this.jYear(j.jy + div(input, 12));\n        input = mod(input, 12);\n        if (input < 0) {\n            input += 12;\n            this.jYear(this.jYear() - 1);\n        }\n        g = toGregorian(this.jYear(), input, lastDay);\n        setDate(this, g.gy, g.gm, g.gd);\n        moment.updateOffset(this);\n        return this;\n    } else {\n        return getJalaliOf(this).jm;\n    }\n};\n\njMoment.fn.date = function (input) {\n    if (isJalali(this)) return jMoment.fn.jDate.call(this,input);\n    else return moment.fn.date.call(this, input);\n};\nfunction getJalaliOf (momentObj) {\n    var d = momentObj._d;\n    if (momentObj._isUTC) {\n        return toJalali(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate());\n    } else {\n        return toJalali(d.getFullYear(), d.getMonth(), d.getDate());\n    }\n}\njMoment.fn.jDate = function (input) {\n    var j\n        , g;\n    if (typeof input === \"number\") {\n        j = getJalaliOf(this);\n        g = toGregorian(j.jy, j.jm, input);\n        setDate(this, g.gy, g.gm, g.gd);\n        moment.updateOffset(this);\n        return this;\n    } else {\n        return getJalaliOf(this).jd;\n    }\n};\n\njMoment.fn.jDay = function (input) {\n    if (typeof input === \"number\") {\n        return moment.fn.day.call(this, input - 1);\n    } else {\n        return (moment.fn.day.call(this) + 1) % 7;\n    }\n};\njMoment.fn.diff = function (input, unitOfTime, asFloat) {\n    //code taken and adjusted for jalali calendar from original moment diff module https://github.com/moment/moment/blob/develop/src/lib/moment/diff.js\n    if (!isJalali(this))\n        return moment.fn.diff.call(this, input, unitOfTime, asFloat);\n\n    var output;\n    switch (unitOfTime) {\n        case \"year\":\n            output = monthDiff(this, input) / 12;\n            break;\n        case \"month\":\n            output = monthDiff(this, input);\n            break;\n        case \"quarter\":\n            output = monthDiff(this, input) / 3;\n            break;\n        default:\n            output = moment.fn.diff.call(this, input, unitOfTime, asFloat);\n    }\n\n    return asFloat ? output : (output < 0 ? Math.ceil(output) || 0 : Math.floor(output));\n\n    function monthDiff(a, b) {\n        if (a.date() < b.date()) {\n            // end-of-month calculations work correct when the start month has more\n            // days than the end month.\n            return -monthDiff(b, a);\n        }\n        // difference in months\n        var wholeMonthDiff = (b.jYear() - a.jYear()) * 12 + (b.jMonth() - a.jMonth()),\n            // b is in (anchor - 1 month, anchor + 1 month)\n            anchor = a.clone().add(wholeMonthDiff, \"months\"),\n            anchor2,\n            adjust\n\n        if (b - anchor < 0) {\n            anchor2 = a.clone().add(wholeMonthDiff - 1, \"months\");\n            // linear across the month\n            adjust = (b - anchor) / (anchor - anchor2);\n        } else {\n            anchor2 = a.clone().add(wholeMonthDiff + 1, \"months\");\n            // linear across the month\n            adjust = (b - anchor) / (anchor2 - anchor);\n        }\n\n        //check for negative zero, return zero if negative zero\n        return -(wholeMonthDiff + adjust) || 0;\n    }\n}\n\njMoment.fn.dayOfYear = function (input) {\n    if (isJalali(this)) return jMoment.fn.jDayOfYear.call(this,input);\n    else return moment.fn.dayOfYear.call(this, input);\n};\njMoment.fn.jDayOfYear = function (input) {\n    var dayOfYear = Math.round((jMoment(this).startOf(\"day\") - jMoment(this).startOf(\"jYear\")) / 864e5) + 1;\n    return isNull(input) ? dayOfYear : this.add(input - dayOfYear, \"d\");\n};\n\njMoment.fn.week = function (input) {\n    if (isJalali(this)) return jMoment.fn.jWeek.call(this,input);\n    else return moment.fn.week.call(this, input);\n};\njMoment.fn.jWeek = function (input) {\n    var week = jWeekOfYear(this, 6, 12).week;\n    return isNull(input) ? week : this.add((input - week) * 7, \"d\");\n};\n\njMoment.fn.weekYear = function (input) {\n    if (isJalali(this)) return jMoment.fn.jWeekYear.call(this,input);\n    else return moment.fn.weekYear.call(this, input);\n};\njMoment.fn.jWeekYear = function (input) {\n    var year = jWeekOfYear(this, 6, 12).year;\n    return isNull(input) ? year : this.add(input - year, \"jyear\");\n};\n\njMoment.fn.add = function (val, units) {\n    var temp;\n    if (!isNull(units) && !isNaN(+units)) {\n        temp = val;\n        val = units;\n        units = temp;\n    }\n    units = normalizeUnits(units, this);\n    if (units === 'jweek' || units==='isoweek') { units = 'week' }\n    if (units === \"jyear\") {\n        this.jYear(this.jYear() + val);\n    } else if (units === \"jmonth\") {\n        this.jMonth(this.jMonth() + val);\n    } else {\n        moment.fn.add.call(this, val, units);\n    }\n    return this;\n};\n\njMoment.fn.subtract = function (val, units) {\n    var temp;\n    if (!isNull(units) && !isNaN(+units)) {\n        temp = val;\n        val = units;\n        units = temp;\n    }\n    units = normalizeUnits(units, this);\n    if (units === \"jyear\") {\n        this.jYear(this.jYear() - val);\n    } else if (units === \"jmonth\") {\n        this.jMonth(this.jMonth() - val);\n    } else {\n        moment.fn.subtract.call(this, val, units);\n    }\n    return this;\n};\n\njMoment.fn.startOf = function (units) {\n    var nunit = normalizeUnits(units, this);\n    if( nunit === \"jweek\"){\n        return this.startOf(\"day\").subtract(this.jDay() , \"day\");\n    }\n    if (nunit === \"jyear\") {\n        this.jMonth(0);\n        nunit = \"jmonth\";\n    }\n    if (nunit === \"jmonth\") {\n        this.jDate(1);\n        nunit = \"day\";\n    }\n    if (nunit === \"day\") {\n        this.hours(0);\n        this.minutes(0);\n        this.seconds(0);\n        this.milliseconds(0);\n        return this;\n    } else {\n        return moment.fn.startOf.call(this, units);\n    }\n};\n\njMoment.fn.endOf = function (units) {\n    units = normalizeUnits(units, this);\n    if (units === undefined || units === \"milisecond\") {\n        return this;\n    }\n    return this.startOf(units).add(1, units).subtract(1, \"ms\");\n};\n\njMoment.fn.isSame = function (other, units) {\n    units = normalizeUnits(units, this);\n    if (units === \"jyear\" || units === \"jmonth\") {\n        return moment.fn.isSame.call(this.clone().startOf(units), other.clone().startOf(units));\n    }\n    return moment.fn.isSame.call(this, other, units);\n};\n\njMoment.fn.isBefore = function (other, units) {\n    units = normalizeUnits(units, this);\n    if (units === \"jyear\" || units === \"jmonth\") {\n        return moment.fn.isBefore.call(this.clone().startOf(units), other.clone().startOf(units));\n    }\n    return moment.fn.isBefore.call(this, other, units);\n};\n\njMoment.fn.isAfter = function (other, units) {\n    units = normalizeUnits(units, this);\n    if (units === \"jyear\" || units === \"jmonth\") {\n        return moment.fn.isAfter.call(this.clone().startOf(units), other.clone().startOf(units));\n    }\n    return moment.fn.isAfter.call(this, other, units);\n};\n\njMoment.fn.clone = function () {\n    return jMoment(this);\n};\n\njMoment.fn.doAsJalali = function () {\n    this.calSystem = CalendarSystems.Jalali;\n    return this;\n};\njMoment.fn.doAsGregorian = function () {\n    this.calSystem = CalendarSystems.Gregorian;\n    return this;\n};\n\njMoment.fn.jYears = jMoment.fn.jYear;\njMoment.fn.jMonths = jMoment.fn.jMonth;\njMoment.fn.jDates = jMoment.fn.jDate;\njMoment.fn.jWeeks = jMoment.fn.jWeek;\n\njMoment.fn.daysInMonth = function() {\n    if (isJalali(this)) {\n        return this.jDaysInMonth();\n    }\n    return moment.fn.daysInMonth.call(this);\n};\njMoment.fn.jDaysInMonth = function () {\n    var month = this.jMonth();\n    var year = this.jYear();\n    if (month < 6) {\n        return 31;\n    } else if (month < 11) {\n        return 30;\n    } else if (jMoment.jIsLeapYear(year)) {\n        return 30;\n    } else {\n        return 29;\n    }\n};\n\njMoment.fn.isLeapYear = function() {\n    if (isJalali(this)) {\n        return this.jIsLeapYear();\n    }\n    return moment.fn.isLeapYear.call(this);\n};\njMoment.fn.jIsLeapYear = function () {\n    var year = this.jYear();\n    return isLeapJalaliYear(year);\n};\njMoment.fn.locale = function(locale) {\n    if (locale && moment.changeCalendarSystemByItsLocale) {\n        if (locale === \"fa\") {\n            this.doAsJalali();\n        } else {\n            this.doAsGregorian();\n        }\n    }\n    return moment.fn.locale.call(this, locale);\n};\n/************************************\n jMoment Statics\n ************************************/\njMoment.locale = function(locale, options) {\n    if (locale && moment.changeCalendarSystemByItsLocale) {\n        if (locale === \"fa\") {\n            this.useJalaliSystemPrimarily(options);\n        } else {\n            this.useJalaliSystemSecondary();\n        }\n    }\n    return moment.locale.call(this, locale);\n};\n\njMoment.from = function(date, locale, format) {\n    var lastLocale = jMoment.locale();\n    jMoment.locale(locale);\n    var m = jMoment(date, format);\n    m.locale(lastLocale);\n    jMoment.locale(lastLocale);\n    return m;\n};\n\njMoment.bindCalendarSystemAndLocale = function () {\n    moment.changeCalendarSystemByItsLocale = true;\n};\njMoment.unBindCalendarSystemAndLocale = function () {\n    moment.changeCalendarSystemByItsLocale = false;\n};\n\njMoment.useJalaliSystemPrimarily = function (options) {\n    moment.justUseJalali = true;\n    var useGregorianParser = false;\n    if (options) {\n        useGregorianParser = options.useGregorianParser;\n    }\n    moment.useGregorianParser = useGregorianParser;\n};\njMoment.useJalaliSystemSecondary = function () {\n    moment.justUseJalali = false;\n};\n\njMoment.jDaysInMonth = function (year, month) {\n    year += div(month, 12);\n    month = mod(month, 12);\n    if (month < 0) {\n        month += 12;\n        year -= 1;\n    }\n    if (month < 6) {\n        return 31;\n    } else if (month < 11) {\n        return 30;\n    } else if (jMoment.jIsLeapYear(year)) {\n        return 30;\n    } else {\n        return 29;\n    }\n};\n\njMoment.jIsLeapYear = isLeapJalaliYear;\n\nmoment.updateLocale(\"fa\", {\n        months: (\"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر\").split(\"_\")\n        , monthsShort: (\"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر\").split(\"_\")\n        , weekdays: (\"یک\\u200cشنبه_دوشنبه_سه\\u200cشنبه_چهارشنبه_پنج\\u200cشنبه_جمعه_شنبه\").split(\"_\")\n        , weekdaysShort: (\"یک\\u200cشنبه_دوشنبه_سه\\u200cشنبه_چهارشنبه_پنج\\u200cشنبه_جمعه_شنبه\").split(\"_\")\n        , weekdaysMin: \"ی_د_س_چ_پ_ج_ش\".split(\"_\")\n        , longDateFormat:\n            { LT: \"HH:mm\"\n                , L: \"jYYYY/jMM/jDD\"\n                , LL: \"jD jMMMM jYYYY\"\n                , LLL: \"jD jMMMM jYYYY LT\"\n                , LLLL: \"dddd، jD jMMMM jYYYY LT\"\n            }\n        , calendar:\n            { sameDay: \"[امروز ساعت] LT\"\n                , nextDay: \"[فردا ساعت] LT\"\n                , nextWeek: \"dddd [ساعت] LT\"\n                , lastDay: \"[دیروز ساعت] LT\"\n                , lastWeek: \"dddd [ی پیش ساعت] LT\"\n                , sameElse: \"L\"\n            }\n        , relativeTime:\n            { future: \"در %s\"\n                , past: \"%s پیش\"\n                , s: \"چند ثانیه\"\n                , m: \"1 دقیقه\"\n                , mm: \"%d دقیقه\"\n                , h: \"1 ساعت\"\n                , hh: \"%d ساعت\"\n                , d: \"1 روز\"\n                , dd: \"%d روز\"\n                , M: \"1 ماه\"\n                , MM: \"%d ماه\"\n                , y: \"1 سال\"\n                , yy: \"%d سال\"\n            }\n        , ordinal: \"%dم\",\n        preparse: function (string) {\n            return string;\n        },\n        postformat: function (string) {\n            return string;\n        }\n        , week:\n            { dow: 6 // Saturday is the first day of the week.\n                , doy: 12 // The week that contains Jan 1st is the first week of the year.\n            }\n        , meridiem: function (hour) {\n            return hour < 12 ? \"ق.ظ\" : \"ب.ظ\";\n        }\n        , jMonths: (\"فروردین_اردیبهشت_خرداد_تیر_مرداد_شهریور_مهر_آبان_آذر_دی_بهمن_اسفند\").split(\"_\")\n        , jMonthsShort: \"فروردین_اردیبهشت_خرداد_تیر_مرداد_شهریور_مهر_آبان_آذر_دی_بهمن_اسفند\".split(\"_\")\n    });\njMoment.bindCalendarSystemAndLocale();\nmoment.locale(\"en\");\n\njMoment.jConvert =  { toJalali: toJalali\n    , toGregorian: toGregorian\n};\n\n/************************************\n Jalali Conversion\n ************************************/\n\nfunction toJalali(gy, gm, gd) {\n    var j = convertToJalali(gy, gm + 1, gd);\n    j.jm -= 1;\n    return j;\n}\n\nfunction toGregorian(jy, jm, jd) {\n    var g = convertToGregorian(jy, jm + 1, jd);\n    g.gm -= 1;\n    return g;\n}\n\n/*\n Utility helper functions.\n */\n\nfunction div(a, b) {\n    return ~~(a / b);\n}\n\nfunction mod(a, b) {\n    return a - ~~(a / b) * b;\n}\n\n/*\n Converts a Gregorian date to Jalali.\n */\nfunction convertToJalali(gy, gm, gd) {\n    if (Object.prototype.toString.call(gy) === \"[object Date]\") {\n        gd = gy.getDate();\n        gm = gy.getMonth() + 1;\n        gy = gy.getFullYear();\n    }\n    return d2j(g2d(gy, gm, gd));\n}\n\n/*\n Converts a Jalali date to Gregorian.\n */\nfunction convertToGregorian(jy, jm, jd) {\n    return d2g(j2d(jy, jm, jd));\n}\n\n/*\n Is this a leap year or not?\n */\nfunction isLeapJalaliYear(jy) {\n    return jalCal(jy).leap === 0;\n}\n\n/*\n This function determines if the Jalali (Persian) year is\n leap (366-day long) or is the common year (365 days), and\n finds the day in March (Gregorian calendar) of the first\n day of the Jalali year (jy).\n @param jy Jalali calendar year (-61 to 3177)\n @return\n leap: number of years since the last leap year (0 to 4)\n gy: Gregorian year of the beginning of Jalali year\n march: the March day of Farvardin the 1st (1st day of jy)\n @see: http://www.astro.uni.torun.pl/~kb/Papers/EMP/PersianC-EMP.htm\n @see: http://www.fourmilab.ch/documents/calendar/\n */\nfunction jalCal(jy) {\n    // Jalali years starting the 33-year rule.\n    var breaks =  [ -61, 9, 38, 199, 426, 686, 756, 818, 1111, 1181, 1210\n        , 1635, 2060, 2097, 2192, 2262, 2324, 2394, 2456, 3178\n    ]\n        , bl = breaks.length\n        , gy = jy + 621\n        , leapJ = -14\n        , jp = breaks[0]\n        , jm\n        , jump\n        , leap\n        , leapG\n        , march\n        , n\n        , i;\n\n    if (jy < jp || jy >= breaks[bl - 1])\n        throw new Error(\"Invalid Jalali year \" + jy);\n\n    // Find the limiting years for the Jalali year jy.\n    for (i = 1; i < bl; i += 1) {\n        jm = breaks[i];\n        jump = jm - jp;\n        if (jy < jm)\n            break;\n        leapJ = leapJ + div(jump, 33) * 8 + div(mod(jump, 33), 4);\n        jp = jm;\n    }\n    n = jy - jp;\n\n    // Find the number of leap years from AD 621 to the beginning\n    // of the current Jalali year in the Persian calendar.\n    leapJ = leapJ + div(n, 33) * 8 + div(mod(n, 33) + 3, 4);\n    if (mod(jump, 33) === 4 && jump - n === 4)\n        leapJ += 1;\n\n    // And the same in the Gregorian calendar (until the year gy).\n    leapG = div(gy, 4) - div((div(gy, 100) + 1) * 3, 4) - 150;\n\n    // Determine the Gregorian date of Farvardin the 1st.\n    march = 20 + leapJ - leapG;\n\n    // Find how many years have passed since the last leap year.\n    if (jump - n < 6)\n        n = n - jump + div(jump + 4, 33) * 33;\n    leap = mod(mod(n + 1, 33) - 1, 4);\n    if (leap === -1) {\n        leap = 4;\n    }\n\n    return  { leap: leap\n        , gy: gy\n        , march: march\n    };\n}\n\n/*\n Converts a date of the Jalali calendar to the Julian Day number.\n @param jy Jalali year (1 to 3100)\n @param jm Jalali month (1 to 12)\n @param jd Jalali day (1 to 29/31)\n @return Julian Day number\n */\nfunction j2d(jy, jm, jd) {\n    var r = jalCal(jy);\n    return g2d(r.gy, 3, r.march) + (jm - 1) * 31 - div(jm, 7) * (jm - 7) + jd - 1;\n}\n\n/*\n Converts the Julian Day number to a date in the Jalali calendar.\n @param jdn Julian Day number\n @return\n jy: Jalali year (1 to 3100)\n jm: Jalali month (1 to 12)\n jd: Jalali day (1 to 29/31)\n */\nfunction d2j(jdn) {\n    var gy = d2g(jdn).gy // Calculate Gregorian year (gy).\n        , jy = gy - 621\n        , r = jalCal(jy)\n        , jdn1f = g2d(gy, 3, r.march)\n        , jd\n        , jm\n        , k;\n\n    // Find number of days that passed since 1 Farvardin.\n    k = jdn - jdn1f;\n    if (k >= 0) {\n        if (k <= 185) {\n            // The first 6 months.\n            jm = 1 + div(k, 31);\n            jd = mod(k, 31) + 1;\n            return  { jy: jy\n                , jm: jm\n                , jd: jd\n            };\n        } else {\n            // The remaining months.\n            k -= 186;\n        }\n    } else {\n        // Previous Jalali year.\n        jy -= 1;\n        k += 179;\n        if (r.leap === 1)\n            k += 1;\n    }\n    jm = 7 + div(k, 30);\n    jd = mod(k, 30) + 1;\n    return  { jy: jy\n        , jm: jm\n        , jd: jd\n    };\n}\n\n/*\n Calculates the Julian Day number from Gregorian or Julian\n calendar dates. This integer number corresponds to the noon of\n the date (i.e. 12 hours of Universal Time).\n The procedure was tested to be good since 1 March, -100100 (of both\n calendars) up to a few million years into the future.\n @param gy Calendar year (years BC numbered 0, -1, -2, ...)\n @param gm Calendar month (1 to 12)\n @param gd Calendar day of the month (1 to 28/29/30/31)\n @return Julian Day number\n */\nfunction g2d(gy, gm, gd) {\n    var d = div((gy + div(gm - 8, 6) + 100100) * 1461, 4)\n        + div(153 * mod(gm + 9, 12) + 2, 5)\n        + gd - 34840408;\n    d = d - div(div(gy + 100100 + div(gm - 8, 6), 100) * 3, 4) + 752;\n    return d;\n}\n\n/*\n Calculates Gregorian and Julian calendar dates from the Julian Day number\n (jdn) for the period since jdn=-34839655 (i.e. the year -100100 of both\n calendars) to some millions years ahead of the present.\n @param jdn Julian Day number\n @return\n gy: Calendar year (years BC numbered 0, -1, -2, ...)\n gm: Calendar month (1 to 12)\n gd: Calendar day of the month M (1 to 28/29/30/31)\n */\nfunction d2g(jdn) {\n    var j\n        , i\n        , gd\n        , gm\n        , gy;\n    j = 4 * jdn + 139361631;\n    j = j + div(div(4 * jdn + 183187720, 146097) * 3, 4) * 4 - 3908;\n    i = div(mod(j, 1461), 4) * 5 + 308;\n    gd = div(mod(i, 153), 5) + 1;\n    gm = mod(div(i, 153), 12) + 1;\n    gy = div(j, 1461) - 100100 + div(8 - gm, 6);\n    return  { gy: gy\n        , gm: gm\n        , gd: gd\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jalali-moment/jalali-moment.js\n");

/***/ })

};
;